var glob = require("glob");
var fs = require("fs");
var path = require("path");
var _ = require("lodash");
var Cache = require('./lib/cache');
var chalk = require('chalk');
var ntlm = require('request-ntlm');
var fm = require('front-matter');
var prompt = require('prompt');
var moment = require('moment');
var cache = new Cache({
  path: getUserHome() + '/.cdsm-cache/'
});

function getUserHome() {
  return process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];
}

module.exports = (function(opts) {

  var creds = {};
  var baseUrl = 'https://siteadmin.dev.intranet.gdg/cds/api';

  var logout = function(cb) {
    cache.flush('cdsm-creds');
    cb(null, true);
  };

  var login = function(cb) {

    var schema = {
      properties: {
        username: {
          required: true,
          message: 'Username'
        },
        password: {
          hidden: true,
          required: true,
          message: 'Password'
        },
        savecreds: {
          validator: /y|n/,
          message: 'Save credentials? (y/N)',
          default: 'n'
        }
      }
    };

    prompt.get(schema, function(err, result) {
      if (err || !result) {
        process.exit(1);
      }
      if (result.username && result.password) {
        creds = {
          username: result.username,
          password: result.password
        };
        var opts = _.extend(creds, {
          url: baseUrl + '/activities'
        });
        ntlm.get(opts, {}, function(err, response) {
          if (response && response.statusCode == 200) {
            if (result.savecreds === 'y') {
              cache.set('cdsm-creds', {username: creds.username, password: creds.password}, 1000 * 60 * 60 * 3);
              console.log('\n\t' + chalk.gray(chalk.green('Authenticated!'), chalk.gray('\n\tCredentials saved for 3 hours.')));
            }
            cb(null, true);
          } else {
            cb(true, null);
          }
        });

      }
    });
  };

  var get = function(id, done) {
    creds = cache.get('cdsm-creds') || false;
    if (!creds) {
      console.log('\n\t' + chalk.red('ERROR: You must be logged in'), chalk.gray('(> cds login)'));
      process.exit(1);
    }
    var params = _.extend(creds, {
      url: baseUrl + '/versions/' + id
    });
    ntlm.get(params, {}, function(err, response, body) {
      var header = [], content;
      header.push('---');
      header.push('location: ' + body.document.location);
      header.push('---');

      content = header.join('\n') + '\n' + body.content;

      if (response && response.statusCode == 200) {
        done(null, content);
      } else {
        done(err, null);
      }
    });
  }

  var deleteVersion = function(id, done) {
    creds = cache.get('cdsm-creds') || false;
    if (!creds) {
      done({message:'You must be logged in'}, null);
    }
    var params = _.extend(creds, {
      url: baseUrl + '/versions/' + id
    });
    ntlm.delete(params, {}, function(err, response) {
      if (response && (response.statusCode == 200 || response.statusCode == 204 )) {
        done(null, id);
      } else {
        done(true, null);
      }
    });
  }

  var upload = function(content, done) {

    creds = cache.get('cdsm-creds') || false;


    if (creds) {

        var name = moment().format('YYYY-MM-DD') + ' - ' + creds.username;

        if (content.attributes.name) {
          name += ' - ' + content.attributes.name;
        }

        if (content.attributes && content.attributes.location) {

          var url = baseUrl + '/versions/location';
          var method = 'post';

          var processUpload = function() {
            var params = _.extend(creds, {
              url: url
            });

            var json = {
              location: content.attributes.location,
              content: content.body,
              name: name
            };
            ntlm[method](params, json, function(err, response, body) {
              if (response && (response.statusCode == 200 || response.statusCode == 201)) {
                var res = (body._id) ? body._id : body;
                done(null, res);
              } else {
                done(body, null);
              }
            });

          };

          if (content.attributes.id) {

            url = baseUrl + '/versions/' + content.attributes.id;
            if (content.opts.publish) {
              url += '/published';
            }
            method = 'put';

          }

          processUpload();

        } else {
          done(null, null);
        }

    } else {
      done({message:'You must be logged in'}, null);
    }
  }

  return {
    get: get,
    upload: upload,
    deleteVersion: deleteVersion,
    logout: logout,
    login: login
  };

})();
